FROM php:8.4-fpm

# Install system dependencies
RUN apt-get update && apt-get install -y \
    git \
    curl \
    libpng-dev \
    libonig-dev \
    libxml2-dev \
    libpq-dev \
    libzip-dev \
    libfreetype6-dev \
    libjpeg62-turbo-dev \
    libmcrypt-dev \
    libgd-dev \
    jpegoptim optipng pngquant gifsicle \
    vim \
    && apt-get clean && rm -rf /var/lib/apt/lists/*

# Install PHP extensions (добавлен pdo_pgsql для PostgreSQL)
RUN docker-php-ext-configure gd --with-freetype --with-jpeg \
    && docker-php-ext-configure pgsql -with-pgsql=/usr/local/pgsql \
    && docker-php-ext-install -j$(nproc) pdo_mysql pdo_pgsql mbstring exif pcntl bcmath gd zip

# Get latest Composer
COPY --from=composer:latest /usr/bin/composer /usr/bin/composer

# Set working directory
WORKDIR /var/www

# Copy composer files and install dependencies
COPY composer.json composer.lock ./
RUN composer install --no-dev --optimize-autoloader --no-interaction --no-scripts

# Create non-root user first
RUN usermod -u 1000 www-data \
    && groupmod -g 1000 www-data

# Copy application files
COPY . .

# Now run composer dump-autoload to execute scripts with artisan available
RUN composer dump-autoload --optimize --no-interaction

# Set permissions for all files and directories
RUN chown -R www-data:www-data /var/www \
    && chmod -R 775 storage bootstrap/cache

# Create .env file template (будет перезаписан в Dokploy)
RUN echo "APP_KEY=" > .env \
    && chown www-data:www-data .env \
    && chmod 664 .env

USER www-data

# Expose port 8000
EXPOSE 8000

# Start script
CMD ["sh", "-c", "php artisan key:generate --force && php artisan config:clear && php artisan migrate --force && php artisan serve --host=0.0.0.0 --port=8000"]